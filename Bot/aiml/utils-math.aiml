<?xml version='1.0' encoding='UTF-8'?>
<aiml version='2.1'>
	<!-- Usage: XCompareDigits [a] [b] -->
	<!-- Returns -1 if a < b, 0 if a = b, 1 if a > b. O(max(a, b)). a and b must be non-negative. -->
	<category>
		<pattern>XCompareDigits * *</pattern>
		<template>
			<think>
				<set var='a'><star/></set>
				<set var='b'><star index='2'/></set>
			</think>
			<condition>
				<li var='a' value='0'>
					<condition var='b'>
						<li value='0'>0</li>
						<li>-1</li>
					</condition>
				</li>
				<li var='b' value='0'>1</li>
				<li>
					<think>
						<set var='a'><map name='predecessor'><get var='a'/></map></set>
						<set var='b'><map name='predecessor'><get var='b'/></map></set>
					</think>
					<loop/>
				</li>
			</condition>
		</template>
	</category>

	<!-- Usage: XAdd [a] [b] -->
	<!-- Returns a + b. a and b must both be non-negative integers. -->
	<category>
		<pattern>XAdd <set>number</set> <set>number</set></pattern>
		<template>
			<think>
				<set var='a'><star/></set>
				<set var='b'><star index='2'/></set>
				<condition var='b'>
					<li value='0'></li>
					<li>
						<set var='a'><map name='successor'><get var='a'/></map></set>
						<set var='b'><map name='predecessor'><get var='b'/></map></set>
						<loop/>
					</li>
				</condition>
			</think>
			<get var='a'/>
		</template>
	</category>
	<category>
		<pattern>XAdd <set>number</set> dash <set>number</set></pattern>
		<template><srai>XSubtract <star/> <star index='2'/></srai></template>
	</category>
	<category>
		<pattern>XAdd dash <set>number</set> <set>number</set></pattern>
		<template><srai>XSubtract <star index='2'/> <star/></srai></template>
	</category>
	<category>
		<pattern>XAdd dash <set>number</set> dash <set>number</set></pattern>
		<template>-<srai>XAdd <star/> <star index='2'/></srai></template>
	</category>

	<!-- Usage: XSubtract [a] [b] -->
	<!-- Returns a - b. a and b must both be non-negative integers. -->
	<category>
		<pattern>XSubtract <set>number</set> <set>number</set></pattern>
		<template>
			<think>
				<set var='a'><star/></set>
				<set var='b'><star index='2'/></set>
				<condition var='b'>
					<li value='0'></li>
					<li>
						<set var='a'><map name='predecessor'><get var='a'/></map></set>
						<set var='b'><map name='predecessor'><get var='b'/></map></set>
						<loop/>
					</li>
				</condition>
			</think>
			<get var='a'/>
		</template>
	</category>
	<category>
		<pattern>XSubtract dash <set>number</set> <set>number</set></pattern>
		<template>-<srai>XAdd <star/> <star index='2'/></srai></template>
	</category>
	<category>
		<pattern>XSubtract <set>number</set> dash <set>number</set></pattern>
		<template><srai>XAdd <star/> <star index='2'/></srai></template>
	</category>
	<category>
		<pattern>XSubtract dash <set>number</set> dash <set>number</set></pattern>
		<template><srai>XSubtract <star index='2'/> <star/></srai></template>
	</category>

	<!-- Usage: XMultiply [a] [b] -->
	<!-- Returns a * b. a and b must both be non-negative integers. -->
	<category>
		<pattern>XMultiply * *</pattern>
		<template>
			<think>
				<set var='a'><star/></set>
				<set var='b'><star index='2'/></set>
				<set var='product'>0</set>
				<condition var='b'>
					<li value='0'></li>
					<li>
						<set var='product'><srai>XAdd <get var='product'/> <get var='a'/></srai></set>
						<set var='b'><map name='predecessor'><get var='b'/></map></set>
						<loop/>
					</li>
				</condition>
			</think>
			<get var='product'/>
		</template>
	</category>

	<!-- Usage: X0Mod [a] XS [b] -->
	<!-- Returns a mod b. The result is always between 0 and (b - 1). -->
	<category>
		<pattern>X0Mod * XS *</pattern>
		<template>
			<think>
				<set var='c'><calculate><star/> % <star index='2'/></calculate></set>
				<set var='isNonNegative'><srai>XIsNumber <get var='c'/></srai></set>
			</think>
			<condition var='isNonNegative'>
				<li value='true'><get var='c'/></li>
				<li><calculate><get var='c'/> + <star index='2'/></calculate></li>
			</condition>
		</template>
	</category>

	<!-- Usage: X1Mod [a] XS [b] -->
	<!-- Returns a 1mod b using one-based modulus. The result is always between 1 and b. -->
	<category>
		<pattern>X1Mod * XS *</pattern>
		<template>
			<think>
				<set var='c'><calculate><star/> % <star index='2'/></calculate></set>
				<set var='isPositive'>
					<condition var='c'>
						<li value='0'>true</li>
						<li><srai>XIsNumber <get var='c'/></srai></li>
					</condition>
				</set>
			</think>
			<condition var='isPositive'>
				<li value='true'><get var='c'/></li>
				<li><calculate><get var='c'/> + <star index='2'/></calculate></li>
			</condition>
		</template>
	</category>

	<category>
		<pattern>IsLetterOrDigit <set>number</set></pattern>
		<template>digit</template>
	</category>
	<category>
		<pattern>IsLetterOrDigit *</pattern>
		<template>letter</template>
	</category>

	<category>
		<pattern>IsNumber *</pattern>
		<template><srai>XIsNumber <star/></srai></template>
	</category>
	<category>
		<pattern>XIsNumber <set>number</set></pattern>
		<template>true</template>
	</category>
	<category>
		<pattern>XIsNumber *</pattern>
		<template>false</template>
	</category>

	<!-- Usage: XEq [a] XS [b] -->
	<!-- Returns true if both arguments are equal; false otherwise. -->
	<category>
		<pattern>XEq ^ XS ^</pattern>
		<template>
			<think><set var='a'><star/></set></think>
			<condition var='a'>
				<li><value><star index='2'/></value>true</li>
				<li>false</li>
			</condition>
		</template>
	</category>

	<!-- Usage: XGt [a] XS [b] -->
	<!-- Returns true if a > b; false otherwise. -->
	<category>
		<pattern>XGt <set>number</set> XS <set>number</set></pattern>
		<template>
			<think>
				<set var='0'>0</set>
				<set var='a'><star/></set>
				<set var='b'><star index='2'/></set>
			</think>
			<condition var='0'>
				<li><value><get var='a'/></value>false</li>
				<li><value><get var='b'/></value>true</li>
				<li>
					<think>
						<set var='a'><map name='predecessor'><get var='a'/></map></set>
						<set var='b'><map name='predecessor'><get var='b'/></map></set>
					</think>
				<loop/>
				</li>
			</condition>
		</template>
	</category>
	<category>
		<pattern>XGt <set>number</set> XS dash <set>number</set></pattern>
		<template>true</template>
	</category>
	<category>
		<pattern>XGt dash <set>number</set> XS <set>number</set></pattern>
		<template>false</template>
	</category>
	<category>
		<pattern>XGt dash <set>number</set> XS dash <set>number</set></pattern>
		<template><srai>XGt <star index='2'/> XS <star/></srai></template>
	</category>
</aiml>

<?xml version="1.0" encoding="UTF-8"?>
<aiml>
	<category>
		<pattern>new bomb</pattern>
		<template>
			<think>
				<set name='topic'>bomb</set>
				<srai>ResetEdgework</srai>
				<set name='BombStrikeCount'>0</set>
				<set name='ModuleCount'>unknown</set>
				<set name='NeedyModuleCount'>unknown</set>
				<set name='SolveCount'>0</set>
				<set name='TurnTheKeysModule'>unknown</set>
			</think>
			<oob>SetGrammar bomb</oob><oob>SetPartialInput false</oob> OK
		</template>
	</category>
	<category>
		<pattern>strike <set>number</set></pattern>
		<topic>bomb *</topic>
		<template>
			<think><set name='BombStrikeCount'><star/></set></think>
			OK
		</template>
	</category>
	<category>
		<pattern>strike zero</pattern>  <!-- In case the user said a strike by mistake. -->
		<topic>bomb *</topic>
		<template>
			<think><set name='BombStrikeCount'>0</set></think>
			OK
		</template>
	</category>
	<category>
		<pattern>strike one</pattern>
		<topic>bomb *</topic>
		<template>
			<think><set name='BombStrikeCount'>1</set></think>
			OK
		</template>
	</category>
	<category>
		<pattern>strike two</pattern>
		<topic>bomb *</topic>
		<template>
			<think><set name='BombStrikeCount'>2</set></think>
			OK
		</template>
	</category>

	<category>
		<pattern>solved</pattern>
		<topic>bomb *</topic>
		<template>
			<set name='SolveCount'>
				<condition name='SolveCount'>
					<li value='*'><map name='successor'><get name='SolveCount'/></map></li>
					<li>1</li>
				</condition>
			</set> solves so far.
		</template>
	</category>
	<category>
		<pattern>SolvableModuleCount</pattern>
		<template>
			<condition name='SolvableModuleCount'>
				<li value='unknown'>unknown</li>
				<li><calculate><get name='ModuleCount'/> - <get name='NeedyModuleCount'/></calculate></li>
			</condition>
		</template>
	</category>
	<category>
		<pattern>UnsolvedModuleCount</pattern>
		<template><srai>UnsolvedModuleCount <get name='SolveCount'/></srai></template>
	</category>
	<category>
		<pattern>UnsolvedModuleCount <set>number</set></pattern>
		<template>
			<condition name='ModuleCount'>
				<li value='unknown'>unknown</li>
				<li>
					<condition name='NeedyModuleCount'>
						<li value='unknown'>unknown</li>
						<li><calculate><get name='ModuleCount'/> - <get name='NeedyModuleCount'/> - <star/></calculate></li>
					</condition>
				</li>
			</condition>
		</template>
	</category>

	<category>
		<pattern>defuse <set>module</set></pattern>
		<template>
			<srai>DeselectModule</srai>
			<think><set name='topic'>Bomb <map name='ModuleCode'><star/></map></set></think>
			<oob><setgrammar><map name='ModuleCode'><star/></map></setgrammar></oob>
			<srai>SelectModule</srai>
			<srai>InitModule</srai>
		</template>
	</category>

	<!-- Called when the topic is changed to this module type. -->
	<category>
		<pattern>SelectModule</pattern>
		<topic>Bomb * ^</topic>
		<template><!-- Does nothing by default. --></template>
	</category>
	<!-- Called when the topic is changed from this module type. -->
	<category>
		<pattern>DeselectModule</pattern>
		<template><!-- Does nothing by default. --></template>
	</category>
	<!-- Called when work is started on an instance of this module. -->
	<category>
		<pattern>InitModule</pattern>
		<topic>Bomb * ^</topic>
		<template><!-- Does nothing by default. --></template>
	</category>

	<!-- next [module] starts a new instance of the specified module. -->
	<category>
		<pattern>next <set>module</set></pattern>
		<template>
			<srai>DeselectModule</srai>
			<think><set name='topic'>Bomb <map name='ModuleCode'><star/></map></set></think>
			<srai>SelectModule</srai>
			<srai>NewSouvenirStoreIndex</srai>
			<srai>InitModule</srai>
		</template>
	</category>
	<category>
		<pattern>next is <set>module</set></pattern>
		<template><srai>next <star/></srai></template>
	</category>
	<category>
		<pattern>new <set>module</set></pattern>
		<template><srai>next <star/></srai></template>
	</category>
	<!-- 'next instance' starts a new instance of the selected module type. -->
	<category>
		<pattern>next one</pattern>
		<template><srai>next instance</srai></template>
	</category>
	<category>
		<pattern>new instance</pattern>
		<template><srai>next instance</srai></template>
	</category>
	<category>
		<pattern>next instance</pattern>
		<template>
			<think><srai>NewSouvenirStoreIndex</srai></think>
			<srai>InitModule</srai>
		</template>
	</category>
	<!-- 'next module' asks for the next module type on the Turn the Keys list. -->

	<category>
		<pattern>rule seed <set>number</set></pattern>
		<template>
			<think>
				<condition name='SraixUnavailable'>
					<li value='true'><set var='ok'><srai>OKRuleSeed <star/></srai></set></li>
					<li><set var='ok'>true</set></li>
				</condition>
			</think>
			<condition var='ok'>
				<li value='true'>
					<think><set name='RuleSeed'><star/></set></think>
					<explode><star/></explode>. OK.
				</li>
				<li>This rule seed cannot be used at the moment.</li>
			</condition>
		</template>
	</category>
	<category>
		<pattern>rule seed <set>number</set> *</pattern>
		<template><srai>rule seed <star/><star index='2'/></srai></template>
	</category>

	<category>
		<pattern>WHY NOT</pattern>
		<that>This rule seed cannot be used at the moment</that>
		<template>I do not have access to the C# library, and AIML scripts for this rule seed have not been provided.</template>
	</category>
	<category>
		<pattern>WHY</pattern>
		<that>This rule seed cannot be used at the moment</that>
		<template><srai>WHY NOT</srai></template>
	</category>
	<category>
		<pattern>WHY IS THAT</pattern>
		<that>This rule seed cannot be used at the moment</that>
		<template><srai>WHY NOT</srai></template>
	</category>
	<category>
		<pattern>HOW COME</pattern>
		<that>This rule seed cannot be used at the moment</that>
		<template><srai>WHY NOT</srai></template>
	</category>

	<category>
		<pattern>solver test</pattern>
		<!-- A simple test to make sure the library is loaded properly. -->
		<template>
			<think>
				<set var='result'><sraix service='BombExpert.Solvers.WiresSolver'>1 blue blue blue</sraix></set>
			</think>
			<condition var='result'>
				<li value='CutSecondWire'>
					<think><set name='SraixUnavailable'>false</set></think>
					The test was successful.
				</li>
				<li>
					<think><set name='SraixUnavailable'>true</set></think>
					The test failed.
				</li>
			</condition>
		</template>
	</category>

	<category>
		<pattern>verification code</pattern>
		<template>The verification code is 2 4 1.</template>
	</category>
	<category>
		<pattern>verify code</pattern>
		<template><srai>verification code</srai></template>
	</category>

	<!-- Recursive categories for decoding NATO alphabet strings, such as 'Alfa Bravo Charlie' -->
	<category>
		<pattern>DecodeNato <set>NATO</set></pattern>
		<template><map name='NATO'><star/></map></template>
	</category>
	<category>
		<pattern>DecodeNato <set>NATO</set> *</pattern>
		<template><map name='NATO'><star/></map><srai>DecodeNato <star index='2'/></srai></template>
	</category>

	<!-- Verification -->
	<category>
		<pattern>verify rule seed</pattern>
		<template>The rule seed is <explode><get name='RuleSeed'/></explode>.</template>
	</category>

	<category>
		<pattern>verify strikes</pattern>
		<template><get name='BombStrikeCount'/></template>
	</category>

	<!-- Usage: OKRuleSeed <rule seed> -->
	<!-- Returns true if we can play with the specified rule seed without the C# library. -->
	<category>
		<pattern>OKRuleSeed 1</pattern>
		<template>true</template>
	</category>
	<category>
		<pattern>OKRuleSeed *</pattern>
		<template>false</template>
	</category>

	<!-- Usage: Solver <module> [parameters] -->
	<!--
		Solvers are functions that process the manual rules for a specific module.
		In many cases they should not take human-readable input or output.
		This category will call the C# solver if it is available,
		and automatically fall back to an AIML subtree otherwise.
		If no fallback is available, it returns 'NoSolver'.

		The C# library can process any rule seed.
		Due to the calculations required for this, AIML solvers must be imported for each individual rule seed.

		All solvers must take the rule seed as the first word of their input.
		This will not be included in usage hints for the Solver categories.
	-->
	<category>
		<pattern>Solver * ^</pattern>
		<template>
			<think>
				<set var='params'><star index='2'/></set>
				<condition var='params'>
					<li value='nil'><set var='params'><get name='RuleSeed'/></set></li>
					<li><set var='params'><get name='RuleSeed'/> <star index='2'/></set></li>
				</condition>

				<condition name='SraixUnavailable'>
					<li value='true'></li>
					<li>
						<set var='result'><sraix><service>BombExpert.Solvers.<star/>Solver</service><get var='params'/></sraix></set>
						<condition var='result' value='SolverError'>
							<set name='SraixUnavailable'>true</set>
						</condition>
					</li>
				</condition>

				<condition name='SraixUnavailable' value='true'>
					<set var='result'><srai>SolverFallback <star/> <get var='params'/></srai></set>
				</condition>
			</think>
			<get var='result'/>
		</template>
	</category>

	<!-- Usage: SolverFallback <module> <rule seed> [parameters ...] -->
	<!-- Fallback solver placeholder in case no fallback solver is available. -->
	<category>
		<pattern>SolverFallback * * ^</pattern>
		<template>
			<think><gossip>No solver available for module <star/> and rule seed <star index='2'/>.</gossip></think>
			NoSolver
		</template>
	</category>
</aiml>
